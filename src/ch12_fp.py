# -*- coding: utf-8 -*-
"""
Created on Wed Dec 13 22:58:05 2017
频繁模式增长算法模板
@author: Burning
"""

def 载入小样例():
    小样例 = [['r', 'z', 'h', 'j', 'p'],
               ['z', 'y', 'x', 'w', 'v', 'u', 't', 's'],
               ['z'],
               ['r', 'x', 'n', 'o', 's'],
               ['y', 'r', 'x', 'z', 'q', 't', 'p'],
               ['y', 'z', 'x', 'e', 'q', 's', 't', 'm']]
    return 小样例

def 初始化数据项集(数据集):
    数据字典 = dict()
    for 条目 in 数据集:
        数据字典[frozenset(条目)] = 1
    return 数据字典

class 频繁模式树节点:
    def __init__(self, 名称, 出现次数, 父节点=None):
        self.名称 = 名称
        self.计数 = 出现次数
        self.父亲 = 父节点
        self.链接 = None
        self.孩子们 = dict()

    def 增长(self, 出现次数):
        self.计数 += 出现次数

    def 显示(self, 层次=1):
        print ('\t'*层次, self.名称, '\t', self.计数)
        for 孩子 in self.孩子们.values():
            孩子.显示(层次 + 1)

def 更新头指针(链上的节点, 新增节点):
    while 链上的节点.链接:
        链上的节点 = 链上的节点.链接
    链上的节点.链接 = 新增节点

def 更新频繁模式树(频度序项集, 频繁模式树, 头指针表, 次数):
    if 频度序项集[0] in 频繁模式树.孩子们:
        频繁模式树.孩子们[频度序项集[0]].增长(次数)
    else:
        频繁模式树.孩子们[频度序项集[0]] = 频繁模式树节点(频度序项集[0], 次数, 频繁模式树)
        if not 头指针表[频度序项集[0]][1]:
            头指针表[频度序项集[0]][1] = 频繁模式树.孩子们[频度序项集[0]]
        else:
            更新头指针(头指针表[频度序项集[0]][1], 频繁模式树.孩子们[频度序项集[0]])
    if len(频度序项集) > 1:
        更新频繁模式树(频度序项集[1:], 频繁模式树.孩子们[频度序项集[0]], 头指针表, 次数)

def 构造频繁模式树(数据项集, 最小支持度=1):
    头指针表 = dict()
    for 数据项 in 数据项集:
        for 元素 in 数据项:
            头指针表[元素] = 头指针表.get(元素, 0) + 数据项集[数据项]
    for 元素 in list(头指针表.keys()):
        if 头指针表[元素] < 最小支持度:
            del(头指针表[元素])#这一操作会影响循环集合所以要深拷贝或列表化
    频繁项集 = set(头指针表.keys())
    if not 频繁项集:
        return None, None
    for 元素 in 头指针表:
        头指针表[元素] = [头指针表[元素], None]
    频繁模式树 = 频繁模式树节点('空集', 1, None)
    for 数据项, 次数 in 数据项集.items():
        本项统计 = dict()
        for 元素 in 数据项:
            if 元素 in 频繁项集:
                本项统计[元素] = 头指针表[元素][0]
        if 本项统计:
            频度序项集 = [条目[0] for 条目 in sorted(本项统计.items(), key=lambda x:x[1], reverse=True)]
            更新频繁模式树(频度序项集, 频繁模式树, 头指针表, 次数)
    return 频繁模式树, 头指针表

def 回溯频繁模式树(节点, 前缀路径):
    while 节点.父亲:
        前缀路径.append(节点.名称)
        节点 = 节点.父亲

def 寻找前缀路径(节点):
    条件模式基 = dict()
    while 节点:
        前缀路径 = []
        回溯频繁模式树(节点, 前缀路径)
        if len(前缀路径) > 1:
            条件模式基[frozenset(前缀路径[1:])] = 节点.计数
        节点 = 节点.链接
    return 条件模式基

def 挖掘条件频繁模式树(频繁模式树, 头指针表, 最小支持度, 前缀, 频繁项集列表):
    频度序项集 = [条目[0] for 条目 in sorted(头指针表.items(), key=lambda x:x[1][0])]
    for 基本模式 in 频度序项集:
        新频繁项集 = 前缀.copy()
        新频繁项集.add(基本模式)
        频繁项集列表.append(新频繁项集)
        #print(基本模式, 头指针表)
        条件模式基 = 寻找前缀路径(头指针表[基本模式][1])
        条件频繁模式树, 条件头指针表 = 构造频繁模式树(条件模式基, 最小支持度)
        if 条件头指针表:
            挖掘条件频繁模式树(条件频繁模式树, 条件头指针表, 最小支持度, 新频繁项集, 频繁项集列表)

数据项集 = 初始化数据项集(载入小样例())
频繁模式树, 头指针表 = 构造频繁模式树(数据项集, 3)
频繁模式树.显示(0)
#寻找前缀路径(头指针表['x'][1])
频繁项集列表 = []
挖掘条件频繁模式树(频繁模式树, 头指针表, 3, set(), 频繁项集列表)
print(频繁项集列表)